<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo NexT 主題看板娘 live2d 安裝 (可換裝)]]></title>
    <url>%2Fposts%2F478%2F</url>
    <content type="text"><![CDATA[效果圖 簡易版本或者進階版本擇一使用。簡易版本 STEP 1 安裝 npm install --save hexo-helper-live2dSTEP 2在 站點配置文件 新增：1234567891011121314151617181920212223242526272829303132# Live2D## https://github.com/EYHN/hexo-helper-live2dlive2d: enable: true # enable: false scriptFrom: local # 默認 pluginRootPath: live2dw/ # 插件在站點上的根目錄(相對路徑) pluginJsPath: lib/ # 腳本文件相對與插件根目錄路徑 pluginModelPath: assets/ # 模型文件相隊與插件根目錄路徑 # scriptFrom: jsdelivr # jsdelivr CDN # scriptFrom: unpkg # unpkg CDN # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定義 url tagMode: false # 標籤模式, 是否僅替换 live2d tag 標籤而非插入到所有頁面中 debug: false # 調試, 是否在控制台輸出日誌 model: use: live2d-widget-model-wanko # npm-module package name # use: wanko # 博客根目錄 /live2d_models/ 下的目錄名 # use: ./wives/wanko # 相對於博客根目錄的路徑 # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定義 url display: superSample: 2 width: 150 height: 300 position: right hOffset: 0 vOffset: -20 mobile: show: true scale: 0.5 react: opacityDefault: 0.7 opacityOnHover: 0.2 詳細請見 live2d 的使用手冊 更換模組 若是想更換不同的模組，可以使用 live2d-widget-models 提供的模組。STEP 1使用 npm install {packagename} 安裝live2d-widget-model-chitoselive2d-widget-model-epsilon2_1live2d-widget-model-gflive2d-widget-model-haru/01（使用npm install --save - live2d-widget-model-haru）live2d-widget-model-haru/02（使用npm install --save - live2d-widget-model-haru）live2d-widget-model-harutolive2d-widget-model-hibikilive2d-widget-model-hijikilive2d-widget-model-izumilive2d-widget-model-koharulive2d-widget-model-mikulive2d-widget-model-ni-jlive2d-widget-model-nicolive2d-widget-model-nietzschelive2d-widget-model-nipsilonlive2d-widget-model-nitolive2d-widget-model-shizukulive2d-widget-model-tororolive2d-widget-model-tsumikilive2d-widget-model-unitychanlive2d-widget-model-wankolive2d-widget-model-z16 模組預覽 原本模組的預覽已經失效了，要嘛就上網搜索看看，要嘛就自己嘗試看看。或者 樣本集 左 Tororo 右 HijikiNito左 Koharu 右 Harutomikuchitoseepsilonharuwankounitychanizumishizukuhibiki其他的請自行測試。STEP 2之後到 站點配置文件 修改你剛剛的設置，找到 model 裡頭的 use: 將後面 live2d-widget-model-wanko 改成你要換成的模組名稱。12345model: use: live2d-widget-model-wanko # npm-module package name # use: wanko # 博客根目錄 /live2d_models/ 下的目錄名 # use: ./wives/wanko # 相對於博客根目錄的路徑 # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定義 url 卸載 若是需要刪除，直接 npm uninstall hexo-helper-live2d，並將 站點配置文件 裡頭的設定刪除即可。進階版本 STEP 1 到stevenjoezhang/live2d-widget下載壓縮包。STEP 2將壓縮包解壓到 themes/next/source，並修改檔名為live2d-widgetSTEP 3 修改 live2d-widget\autoload.js將 1const live2d_path = "https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/"; 修改成 1const live2d_path = "/live2d-widget/";STEP 4 打開 .\themes\next\layout\_layout.swig，在 body 上方加上 1&lt;script src="/live2d-widget/autoload.js"&gt;&lt;/script&gt; 並在上方 &lt;head&gt; 與&lt;/head&gt;之間加上 12&lt;script src="https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js"&gt;&lt;/script&gt;&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css"&gt;(因為進階版需要 jQuery 和 font-awesome 支援)STEP 5 在 站點配置文件 加上12live2d: enable: truethemes\next\source\live2d-widget 裡的 waifu.css waifu-tips.js 和waifu-tips.json 用來修改看板娘大小、位置、格式、說的話。 參考資料 L2Dwidgetstevenjoezhang/live2d-widgetHexo 博客 NexT 主题美化之新增看板娘(能说话、能换装) 网页添加 Live2D 看板娘 给博客添加能动的看板娘(Live2D)- 将其添加到网页上吧 document.querySelectorAll('.github-emoji') .forEach(el => {if (!el.dataset.src) {return;} const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => {img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => {img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>live2d</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 搭建系列 - 為 HEXO NexT 主題安裝 Gitalk 評論功能]]></title>
    <url>%2Fposts%2F10105%2F</url>
    <content type="text"><![CDATA[前段時間使用過 Disqus 覺得不夠簡潔，而且有很多英文挺不方便的，在設置裡大致看過所有的評論系統，本來想使用 Valine 但是需要實名認證 (需要有支付寶)，沒法完成認證所以改用 Gitalk，那這邊就說明一下如何使用 Gitalk。Demo: https://gitalk.github.io 官方中文說明：https://github.com/gitalk/gitalk/blob/master/readme-cn.md特性 使用 GitHub 登录 支持多语言 [en, zh-CN, zh-TW, es-ES, fr, ru]支持个人或组织 无干扰模式（设置 distractionFreeMode 为 true 开启）快捷键提交评论 （cmd|ctrl + enter）準備工作 如果你打算在自己的網站使用 GITALK 並且網站的源碼在 github 的倉庫上，你可以直接使用這個倉庫 (Gitalk 只會把評論放在倉庫的 issues 里面)；如果不是，請創建一個倉庫。 申請 GitHub OAuth application，使 Gitalk 有權限操作 github 上的倉庫。申請 Github OAuth applicationSTEP 1首先前往 Github - Settings - Developer settings - OAuth Apps - New OAuth App，或者直接點擊 Register a new OAuth application 創建 OAuth App。Application name：必填，OAuth 的名字 Homepage URL：必填，使用組件的網站網址(填寫你的 BLOG 網址即可)Application description：選填，該 OAuth 的說明Authorization callback URL：必填，授權成功後回調網址，跟 Homepage URL 參數保持一致就好 這些參數在註冊成功後是可以修改。STEP 2創建成功後進入 OAuth你可以在這裡找到 client_id / client_secret設定主題配置文件 請在 主題配置文件 設置 github_id 倉庫的創建者repo 填你存放 gitalk 的倉庫名稱client_id / client_secret 在你的 OAuth 裡頭可以找到admin_user 你 github 倉庫的管理者(如是多人管理可以使用 ['admin_user1'],['admin_user2'] 這個格式)language: zh-TW (也可設置其他 如:en | es-ES | fr | ru | zh-CN | zh-TW) 第一次 Gitalk 需要初始化評論，需要你先點擊使用 GitHub 登陸，然後刷新頁面才會初始化，或者自己去倉庫里手動創建一個 issues，並添加 issues 的 labels 值為 Gitalk 的 labels 參數和 id 參數的值。Gitalk 評論是通過 issues 的 labels 來標示一篇文章的。如果 labels 中存在相應文章的 label 標籤，那就說明該文章已經初始化過了。例如 補充 管理評論 點擊評論右上方的鉛筆圖示可以管理評論。可以對評論做 reaction 或是其他管理動作。你也可以在右方設定通知方式 分別為 不訂閱 : 僅當你參與了或者被 @提及時才會收到通知 訂閱 : 接收這個問題的所有通知 自訂 : 有以下兩種 解決問題時收到通知 重新打開問題才會收到通知 在右側可以管理 issue創建 issue在 issue 頁面點擊 New issue設定 issueAssignees: 選擇用於從當前倉庫的所有成員中，指派某個 Issue 的處理人員。Lagbels: 可以貼上標籤，這樣有利於分類管理和過濾查看。創建 labels在 issues 頁面點擊 Labels點擊 New Label設定並創建 Label你可以在 .\themes\next\layout\_third-party\comments\gitalk.swig管理文章 id 格式 NexT 7.4.1 的預設為1id: '{{gitalk_md5(page.path) }}', 更詳細的建議參考：如何使用 Issue 管理软件项目？Github Project-Card 與 Issue 的關係 （上）Github Project-Card 與 Issue 的關係 （下）關於 GitHub 議題追蹤 (Issue Tracker) 的關鍵字搜尋技巧 參考網站Gitalk 评论插件使用教程Gitalk readme-cn.mdHexo 博客添加 Gitalk 评论系统 document.querySelectorAll('.github-emoji') .forEach(el => {if (!el.dataset.src) {return;} const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => {img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => {img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 搭建系列 - BLOG 隨機背景切換]]></title>
    <url>%2Fposts%2F52452%2F</url>
    <content type="text"><![CDATA[圖片來源：Unsplash Source這個網站提供了 API 接口調用，你可以非常容易的去使用它。目前提供的免費圖片有 1.3M 張。效果請參考本站。使用方法 打開 .\source\_data\styles.styl 加上 123456 body { background-image:url(https://source.unsplash.com/random/1600x900); #網址可替換 background-repeat: no-repeat; background-attachment:fixed; background-position:50% 50%;} 參數 url：可更換為自己喜歡的圖片的地址。background-repeat：是否重複出現background-attachment：定義背景圖片隨滾動軸的移動方式background-position：設置背景圖像的起始位置。 個性化 (URL) 特定用戶 假設你有想使用 unsplash 上特定用戶的圖片，請將 background-image:url 設定成下方格式：https://source.unsplash.com/user/{USERNAME}特定用戶 likes假設你有想使用特定用戶 likes 的圖片 https://source.unsplash.com/user/{USERNAME}/likes 特定用戶收藏 假設你有想使用特定用戶收藏的圖片 https://source.unsplash.com/collection/{COLLECTION ID} 每日 / 每週 圖片 Randomhttps://source.unsplash.com/dailyRandom from a userhttps://source.unsplash.com/user/erondu/dailyRandom from a search termhttps://source.unsplash.com/weekly?water 隨機關鍵字 隨機關鍵字搜索出來的圖片 https://source.unsplash.com/featured/?{KEYWORD},{KEYWORD}ex:https://source.unsplash.com/1600x900/?nature,water 特定照片https://source.unsplash.com/{PHOTO ID}/{WIDTHxHEIGHT}ex:https://source.unsplash.com/WLUHO9A_xik/1600x900 document.querySelectorAll('.github-emoji') .forEach(el => {if (!el.dataset.src) {return;} const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => {img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => {img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【學習筆記】資料結構導論]]></title>
    <url>%2Fposts%2F8937%2F</url>
    <content type="text"><![CDATA[由於是個人的學習筆記，因此有可能存在錯誤，若有發現錯誤之處煩請糾正或者一起討論！大綱 認識資料與資訊的關係 何謂資料結構 (Data Structure)? 何謂演算法 (Algorithm)? 程式設計概念 演算法的效率與評估 認識資料與資訊的關係 以下內容參考 何謂資訊? 何謂資料? 其兩者關系為何? - 奇摩知識 +資料 對於電腦的資料處理模式而言，未經處理而直接輸入電腦預備進行處理的數據稱為 資料 (Data)。 通常資料指未知數據代表性的數據集合，亦即對事實的紀錄。資料依其特性亦可分為類比資料 (例如溫度，聲波，色彩等) 與數位資料 (例如電壓)。 資訊 指經過電腦處理後，對資料輸入者而言，具有特定意義的資料集合。因此：資料 (Data) -&gt; 經過處理與整理 -&gt; 資訊(Information)。 例如今天有一份表格記錄著班級的期中考試成績，這些成績就是資料，而總成績、平均成績、排名則是資訊。這些資訊可以提供我們判斷及做決策的依據。程式設計 = 資料結構 + 演算法 因此我們需要選擇適當的 "資料結構" 設計出最有效率的 "演算法"，進而轉換成有效率的 "程式"。何謂資料結構 (Data Structure)? 在電腦科學中，資料結構（英語：data structure）是電腦中儲存、組織資料的方式。 資料結構意味著介面或封裝：一個資料結構可被視為兩個函式之間的介面，或者是由資料類型聯合組成的儲存內容的存取方法封裝。 大多數資料結構都由數列、記錄、可辨識聯合、參照等基本類型構成。舉例而言，可為空的參照（nullable reference）是參照與可辨識聯合的結合體，而最簡單的鏈式結構連結串列則是由記錄與可空參照構成。 資料結構可透過程式語言所提供的資料類型、參照及其他操作加以實現。一個設計良好的資料結構，應該在儘可能使用較少的時間與空間資源的前提下，支援各種程式執行。 . . . －－－維基百科 太生澀難懂了！有沒有更簡潔有力一點的解釋？資料結構就是在探討如何將資料有組織的存放在記憶體中，以提升程式 的執行效率。靜態與動態資料結構 靜態 (Static) 資料結構：所謂靜態資料結構，是指資料所占用的空間大小及資料數目都必須事先宣告，因此在程式編譯的同時，空間的大小及資料數目就無法改變了。動態 (Dynamic) 資料結構：所謂動態資料結構，資料所使用之空間大小及資料數目都不必事先宣告，在程式執行時才做記憶體的空間配置。陣列的使用就是靜態資料結構的代表，而動態資料結構則以鏈結串列結構為代表。常見的資料結構 串列 (List): 先來先買，或稱序列 (sequence)陣列 (Array)堆疊 (Stack): 後進先出，又稱為棧或堆棧 佇列 (Queue)樹狀結構 (Tree)圖形結構 (Graph)…等，不只這些，其他的以後再說。串列 (List) 有序的物件集合，具有索引特性，長度可以變動。資料排成一列，便於追加與刪除，缺點是存取資料較費時。每一個資料和一個指標 (Pointer) 配對，指向下一筆資料在記憶體中的位址。尤指 連結串列 (linked list)。 下方就是宣告串列的程式碼：12numbers = [10, 20, 30, 40]print(numbers[0]) // 列印串列第一筆資料 指標 (Pointer) 是程式語言中的一類資料類型及其物件或變數，用來表示或儲存一個記憶體位址，這個位址的值直接指向（points to）存在該位址的物件的值。陣列 (Array) 占用連續記憶體空間。用來表示有序串列之一種方式。各元素的資料型態皆相同。支援隨機存取與循序存取。插入或刪除元素時較為麻煩，因為需挪移其他元素。下方就是宣告陣列的程式碼：12int[] data = new int[100]; // 宣告陣列大小 data[0] = 1; // 陣列第一格存放的整數是 1 串列 (List) 和陣列 (Array) 區別在串列 (List) 只允許順序存取，而陣列 (Array) 允許隨機存取。但串列 (List) 比陣列 (Array) 更有彈性，且不必事先宣告大小的變數。堆疊 (Stack) 堆疊原理為 後進先出 (LIFO, Last In First Out)。 只允許在最新的資料那端操作。加入資料稱為 Push(推入)，移除資料稱為 Pop(彈出)。常與另一種有序的線性資料集合 佇列 相提並論。堆疊常用 一維陣列 或 連結串列 來實現。佇列 (Queue) 佇列原理為 先進先出 (FIFO, First-In-First-Out)。 似堆疊，但佇列可以在兩端進行資料操作。佇列只能在後端 (rear) 插入操作，稱為進入佇列 (Enqueue)；只能在前端(front) 刪除資料，稱為輸出佇列 (Dequeue)。 樹狀結構 (Tree) 依照圖來看它是一個上下顛倒的樹，其根部在上方，是資料的開頭，而下方的資料稱為葉子。圖形結構 (Graph) 圖形很像樹狀結構，不同的地方是節點之間沒有父子關係。請參考 認識圖形結構 何謂演算法 (Algorithm)? 用於有限步驟內解決一個特定問題。例如：你可以稱之為「應對燈泡不亮的簡單演算法」。演算法的特性 一個演算法需要俱備的五個特性：輸入 (Input)、輸出(Output)、明確性(Definiteness)、有限性(Finiteness)、有效性(Effectiveness) 不一定要有輸入，但至少要有一個輸出。明確性 每一行指令都必須明確，不可模稜兩可。今天有一個情境，需要判斷某數值是否為偶數。(1)輸入一個正整數 (2) 作餘數運算是否為 0(3)為 0 即為偶數 從演算法觀點來看，第二點並不符合明確性，因為並無說明餘數運算是如何運算。應該改寫成：(1)輸入一個正整數 N(2)除果 N 除以為其餘數為 0(3)則其 N 為偶數 有限性 演算法必須能終止執行，亦即必須在有限的步驟內完成。必須說的是：真正的程式是可以有無窮迴路的動作，但演算法並非是真正可以執行的程式。例如：Windows 作業系統除非系統關機或當機，否則它會永遠執行「等待迴圈」，等待使用者從輸入設備輸入指令。有效性 演算法的處理動作必須是有效且具體可行的，同時能讓使用者使用紙筆計算獲得答案。因此，演算法是一個演算法是明確、有效、最終會結束的可執行步驟。描述演算法的方法 描述演算法的方法有：文字描述 流程圖 (Flow Chart) 虛擬碼 (Pseudo Code) 電子電路 數學 …等 流程圖 利用「流程圖」來描述使用者登入帳號與密碼時，系統檢查的過程。虛擬碼 兼具文字描述及流程圖的優點，其方式是用文字摻雜程式語言，來描述解題步驟與方法。12345Input: UserName,PasswordIF(UserName and Password) ALL TrueOutput: You Can Pass!elseOutput: You Can't Pass!資料結構中一般都是利用虛擬碼 (Pseudo Code) 來表示演算法。演算法的基本結構 循序 (Sequence) 結構 依先後順序，一個步驟接著一個步驟依序執行。選擇 (Selection) 結構 依據不同的條件，選擇不同的解題步驟執行。重複 (Iteration) 結構 部分解題步驟需要反覆執行，直到符合或是不符合某一條件式時，才會離開重複執行的部份。重複結構也常被稱為「迴圈 (Loop)」 。程式設計概念 分析所要解決的問題 (需求) 設計解題的步驟 (演算法) 例如 Binary Search(二分搜索算法) 編寫程式 (程式碼) 上機測試, 偵測錯誤 (debug)Programming Language Error:(1)Syntax Error(語法錯) - 只在編譯時出現(Compiler Time) 例如以下的程式是正確的：1System.out.println("Hello World");以下的程式不正確：1System.out.println(Hello World);第二個程式理論上要顯示的是叫作 Hello World 的變數，而不是 Hello World 這個字，且 Java 語言的變數名稱中不可有空白，因此會出現語法錯誤。(2)Semantic Error(語意錯) - Logical Error程式語法雖然正確但無法提供正確的功能。例如用 C 語言計算平均數，以下程式雖然能夠通過編譯並執行，但結果是錯誤的。1234int average(int a, int b){ return a + b / 2; /* 應為 (a + b) / 2 */}Debug methods:(1) Single steps(2) Breaking Point Setting編寫程式說明書 (可執行) 演算法 VS 程式 演算法是以人為主，任何人都可以閱讀的程式碼，強調「可讀性」。程式是以電腦為主，強調執行結果正確性 (Correctness)、可維護性(Maintainable) 及執行效率 (Performance)。 演算法的效率評估 評估演算法的三種方法：最差狀況分析 (Worst-case analysis) [最廣用] 在所有可能的輸入組合下最多所需要的時間 (Upper bound)，O(n) 最常被使用來表示理論「上限」。平均狀況分析 (Average-case analysis) 在所有可能的輸入組合下平均所需時間 (Average Time)。 最佳狀況分析 (Best-case analysis) 分析演算法對何種輸入資料所需花費的時間最少 (Lower bound)。 基本上時間複雜度的分析比空間複雜度來的重要，因為當資料量龐大時，時間複雜度會有較大的差異性，空間複雜度則差異較小，再加上目前的記憶體相當便宜，因此目前在資料結構所探討演算法之效率評估，都著重在時間複雜度方面。1. 時間複雜度 (Time Complexity) 定義：演算法執行時，所需花費的時間。分析方法：統計演算法中指令執行的次數。(演算法有多快不是以秒衡量，而是以步驟次數。)註解、括號、函式宣告及變數宣告不列入執行時間計算。變數宣告時若有指派初始值，則視為 1 次。函式呼叫視為 1 次。不考慮指令本身的複雜度或實際執行時間，一個指令皆視為 1 次。範例：// 假設某電腦執行加法要 5 微秒，減法要 10 微秒，乘法要 20 微秒。不管實際執行時間 A=0、A++、A--、A=A*5 都視為執行一次。範例：1234567891011int sum(int[] data) // 0 次 {// 0 次 int i; // 0 次 int sum = 0; // 1 次 //for 迴圈最後會判斷條件不成立，跳離迴圈，所以比其內容多執行一次 for(i = 0; i &lt; data.length; i++){// data.length+1 次 sum += data[i]; // data.length 次 } // 0 次 return sum; // 1 次} 時間複雜度常用大 O 符號表述一個演算法在輸入 n 個東西時，總執行時間與 n 的關係。時間複雜度的公式是： T(n) = O(f(n) )，其中 f(n) 表示每行代碼執行次數之和，這個公式的全稱是：算法的漸進時間複雜度。如果一個演算法對於任何大小為ｎ（必須比 n0 大）的輸入，它至多需要 5n^3 + 3n 的時間執行完畢，那麼它的漸近時間複雜度是 O(n^3)。取執行次數中最高次方或最大指數部分 O(1)123function(int n){ print(n); # 1 次}O(n)12345function(int n){ for(i=0; i&lt;n ;i++){# n+1 次 print(i); #輸入的 n 的數量會跑 n 次 }}O(n²)1234567function(int n){ for(i=0; i&lt;n; i++){# n+1 次 for(j=0; j&lt;n ;j++){# n*(n-1) 次 print(i * j); #n²次 } }} 常見的六種時間複雜度與演算法 O(1)：陣列讀取O(n)：簡易搜尋O(log n)：二分搜尋O(nlogn)：合併排序O(n²)：選擇排序O(2^n)：費波那契數列 時間複雜度的比較 2. 空間複雜度(Space Complexity) 定義：演算法執行時，所需花費的記憶體。分析方法：統計演算法中所使用的固定空間 (Fixed Space) 和變動空間 (Variable Space)。 固定空間 (Fixed Space, C)：非主要考量 程式碼大小 (Instruction Space) 簡單變數 (EX：int, float,…) 常數 固定大小的結構變數 (EX：陣列、記錄、…等） 變動空間 (Variable Space, SP) 參數：以傳值呼叫 (Call By Value) 傳遞的參數 (EX：陣列) 遞迴所需的堆疊空間 固定空間通常都是必要的，所以當有使用空間限制的需求時，只會考慮能否節省變動空間。空間函式 S(P)：表示當輸入資料量為 n 時，演算法中指令所需執行的次數。 格式：S(P) = C + SP參考：[資料結構] 演算法評估與資料型別 O(1) 不會影響使用的變數數量。12345function(int n){ for(int i=0;i&lt;n;i++){ print(i); }}O(n)會隨著丟進去的數字而影響變數的量。123456function(int n){ int c[n]; for(int i=0;i&lt;n;i++){ c[i] = i; }}參考資料 《演算法圖鑑》第一章：資料結構 演算法的表示–流程圖 【演算法】入門介紹－什麼是演算法 What’s Algorithm? 初學者學演算法｜從時間複雜度認識常見演算法（一）資料結構筆記 (一)：演算法、時間複雜度、空間複雜度 初學者學演算法｜談什麼是演算法和時間複雜度 Second Round 目錄：演算法與資料結構 程式語言的控制結構 [資料結構] 演算法評估與資料型別 算法的时间与空间复杂度（一看就懂）基礎電腦科學：演算法概要 document.querySelectorAll('.github-emoji') .forEach(el => {if (!el.dataset.src) {return;} const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => {img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => {img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>資料結構</category>
      </categories>
      <tags>
        <tag>資料結構</tag>
        <tag>學習筆記</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最新 Hexo NexT v7.4.1 主題優化]]></title>
    <url>%2Fposts%2F44730%2F</url>
    <content type="text"><![CDATA[主題改為 NexT 之後發現能玩的功能實在太多了，要修改的地方也很多，搗鼓一番後決定寫這篇文章來記錄我個人的 NexT 主題優化歷程，順便分享給大家最新版本的修改方式。寫在前頭 NexT 主題更新到 v7.3.0+ 這一版之後的主題簡化自定義內容的添加方法，刪除了以前版本所用的 custom.styl 自定義 css 樣式文件 新版的使用方法，主題配置文件 中：12345678910111213# Define custom file paths.# Create your custom files in site directory `source/_data` and uncomment needed files below.custom_file_path: #head: source/_data/head.swig #header: source/_data/header.swig #sidebar: source/_data/sidebar.swig #postMeta: source/_data/post-meta.swig #postBodyEnd: source/_data/post-body-end.swig #footer: source/_data/footer.swig #bodyEnd: source/_data/body-end.swig #variable: source/_data/variables.styl #mixin: source/_data/mixins.styl #style: source/_data/styles.styl1#style: source/_data/styles.styl將注釋刪除 (就是刪除前方 #)，然後在 BLOG 根目錄/source/_data/ 裡新增文件 styles.styl，在該文件中添加自定義內容。 同樣，如果需要在 head 中添加內容，需要新建 head.swig 文件，在其中添加自定義內容即可。 在 post.swig 中添加的文章結尾樣式，可以直接添加在 post-body-end.swig 文件中。安裝 NexT 主題 兩種辦法：下載檔案 前往 NexT 版本發布頁面(~ 最新 v7.4.0)、NexT 版本發布頁面(~v5) 選擇需要的版本點 Source code(zip)下載到本地 解壓縮之後放到 ./themes/ 並將解壓後的文件夾名稱（hexo-theme-next- 版本號）更改為 next。克隆 12cd hexogit clone https://github.com/theme-next/hexo-theme-next themes/next 在站點配置文件 的 theme 後方改成 next。主題自帶功能 文本居中引用 文本居中引用效果 123{% cq %} 文本居中引用效果 {% endcq %}NOTE 有 HTML 方式或是直接使用標籤 default1&lt;div class="note default"&gt;&lt;p&gt;default html&lt;/p&gt;&lt;/div&gt;Content (md partial supported)1{% note class_name %} Content (md partial supported) {% endnote %} 其中，class_name 可以是以下列表中的一個值：defaultprimarysuccessinfowarningdanger在 主題配置文件 中可修改 note 樣式。12345678910111213# Note tag (bs-callout)note: # Note tag style values: # - simple bs-callout old alert style. Default. # - modern bs-callout new (v2-v3) alert style. # - flat flat callout style with background, like on Mozilla or StackOverflow. # - disabled disable all CSS styles import of note tag. style: simple icons: true border_radius: 3 # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6). # Offset also applied to label tag variables. This option can work with disabled note tag. light_bg_offset: 0LABEL使用方法：1{% label [class]@Text %}&gt; [class] : default | primary | success | info | warning | danger.效果：Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.12345Lorem {% label @ipsum %} {% label primary@dolor sit %} amet, consectetur {% label success@adipiscing elit, %} sed {% label info@do eiusmod %} tempor incididunt ut labore et dolore magna aliqua.Ut enim *{% label warning @ad %}* minim veniam, quis **{% label danger@nostrud %}** exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.Duis aute irure dolor in reprehenderit in voluptate ~~{% label default @velit %}~~ &lt;mark&gt;esse&lt;/mark&gt; cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.TABS 標籤頁 在主題配置文件 將 tabs 改成 true。123456# Tabs tagtabs: transition: tabs: true labels: true border_radius: 0代碼：1234567891011{% tabs 標籤頁, 1 %}&lt;!-- tab 標題 1 --&gt;** 標籤頁 1**&lt;!-- endtab --&gt;&lt;!-- tab 標題 2 --&gt;** 標籤頁 2**&lt;!-- endtab --&gt;&lt;!-- tab 標題 3 --&gt;** 標籤頁 3**&lt;!-- endtab --&gt;{% endtabs %}標籤頁後面的，1 代表預設開啟的標籤頁數，若改成 -1 代表隱藏。BUTTON 標籤 123{% button url, text, icon [class], [title] %} 或者 {% btn url, text, icon [class], [title] %} 範例：1{% btn #, Text %}{% btn #, Text &amp; Title,, Title %}TextText &amp; Title123456&lt;div&gt;{% btn #,, home fa-5x %}{% btn #,, home fa-5x %}{% btn #,, home fa-5x %}&lt;/div&gt;&lt;div&gt;{% btn #,, home fa-4x %}{% btn #,, home fa-4x %}{% btn #,, home fa-4x %}&lt;/div&gt;&lt;div&gt;{% btn #,, home fa-3x %}{% btn #,, home fa-3x %}{% btn #,, home fa-3x %}&lt;/div&gt;&lt;div&gt;{% btn #,, home fa-2x %}{% btn #,, home fa-2x %}{% btn #,, home fa-2x %}&lt;/div&gt;&lt;div&gt;{% btn #,, home fa-lg %}{% btn #,, home fa-lg %}{% btn #,, home fa-lg %}&lt;/div&gt;&lt;div&gt;{% btn #,, home %}{% btn #,, home %}{% btn #,, home %}&lt;/div&gt;12&lt;p&gt;{% btn #, Text &amp; Icon (buggy), home %}{% btn #, Text &amp; Icon (fixed width), home fa-fw %}&lt;/p&gt;Text &amp; Icon (buggy) Text &amp; Icon (fixed width)123&lt;div class="text-center"&gt;&lt;div&gt;{% btn #,, header %}{% btn #,, edge %}{% btn #,, times %}{% btn #,, circle-o %}&lt;/div&gt;&lt;div&gt;{% btn #,, italic %}{% btn #,, scribd %}&lt;/div&gt;&lt;div&gt;{% btn #,, google %}{% btn #,, chrome %}{% btn #,, opera %}{% btn #,, diamond fa-rotate-270 %}&lt;/div&gt;&lt;/div&gt;1&lt;div class="text-center"&gt;{% btn #, Previous Chapter, arrow-left fa-fw fa-lg, Previous Chapter (Full Image) %} {% btn #, Next Chapter, arrow-right fa-fw fa-lg, Next Chapter (Label) %}&lt;/div&gt;Previous Chapter Next Chapter後方是 font awesome 的 class id 。Group Pictures使用方法：123456{% grouppicture [group]-[layout] %}{% endgrouppicture %}# 或者 {% gp [group]-[layout] %}{% endgp %}#[group] : Total number of pictures to add in the group.#[layout] : Default picture under the group to show.12345678{% grouppicture 6-3 %} ![](/images/docs/github.png) ![](/images/docs/github.png) ![](/images/docs/github.png) ![](/images/docs/github.png) ![](/images/docs/github.png) ![](/images/docs/github.png){% endgrouppicture %} 設置 RSSNexT 中 RSS 有三個設置選項，滿足特定的使用場景。更改 主題配置文件 ，設定 rss 字段的值： 具體的鏈接地址：適用於已經燒製過 Feed 的情形。false：禁用 RSS，不在頁面上顯示 RSS 連接。留空：使用 Hexo 生成的 Feed 鏈接。你需要先安裝 hexo-generator-feed 插件。安裝方式：在 BLOG 根目錄 Git Bash1npm install hexo-generator-feed --save在 站點配置文件,中加入 1234567891011feed: type: atom path: atom.xml limit: 20 hub: content: content_limit: 140 content_limit_delim:' ' order_by: -date icon: icon.png autodiscovery: true 修改 favicon將 favicon 放到 source 底下，主題配置文件 找到 favicon 處直接改成：123456favicon: small: favicon.ico medium: favicon.ico . . .[在線生成 favicon.ico](http://tw.faviconico.org/)打開搜索功能 主題配置文件 找到 local search 處，enable 處改成 true。12345678910111213# Local Search# Dependencies: https://github.com/wzpan/hexo-generator-searchlocal_search: enable: true # If auto, trigger search by changing input. # If manual, trigger search by pressing enter key or search button. trigger: auto # Show top n results per article, show all results by setting to -1 top_n_per_article: 1 # Unescape html strings to the readable one. unescape: false # Preload the search data when the page loads. preload: true此功能需要安裝 `hexo-generator-search` 和 `hexo-generator-searchdb`12npm i hexo-generator-searchnpm install hexo-generator-searchdb --save站點配置文件,中加入：123456# Search search: path: search.xml field: post format: html limit: 10000將標籤的# 改成圖案 主題配置文件 找到 tag_icon 改成 true 即可。12# Use icon instead of the symbol # to indicate the tag at the bottom of the posttag_icon: true將網頁下方版權隱藏 主題配置文件 找到以下，將想隱藏的版權改成 false 即可。1234567891011powered: # Hexo link (Powered by Hexo). enable: false # Version info of Hexo after Hexo link (vX.X.X). version: false theme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: false # Version info of NexT after scheme info (vX.X.X). version: false自定義樣式 自定義 NOTE將以下代碼放 source/_data/styles.styl123456789101112131415161718192021222324252627// 自定義 NOTE.alert { padding: 15px; margin-bottom: 20px; border: 1px solid transparent; border-radius: 4px;}.alert-success { color: #468847; background-color: #dff0d8; border-color: #d6e9c6;}.alert-info { color: #3a87ad; background-color: #e2eaee; border-color: #c5d5dd;}.alert-warning { color: #c09853; background-color: #fcf8e3; border-color: #faebcc;}.alert-danger { color: #b94a48; background-color: #f2dede; border-color: #ebccd1;} success1&lt;div class="alert alert-success"&gt;&lt;i class="fa fa-lightbulb-o"&gt;&lt;/i&gt; success&lt;/div&gt; info1&lt;div class="alert alert-info"&gt;&lt;i class="fa fa-info"&gt;&lt;/i&gt; info&lt;/div&gt; warning1&lt;div class="alert alert-warning"&gt;&lt;i class="fa fa-bell"&gt;&lt;/i&gt; warning&lt;/div&gt; danger1&lt;div class="alert alert-danger"&gt;&lt;i class="fa fa-bug"&gt;&lt;/i&gt; danger&lt;/div&gt; 自定義文字色塊 將以下代碼放 source/_data/styles.styl12345678910111213141516171819202122232425// 自定義文字色塊span#inline-blue, span#inline-green, span#inline-purple, span#inline-yellow { display: inline; padding: .2em .6em .3em; font-size: 90%; font-weight: 700; line-height: 1; color: #fff; text-align: center; vertical-align: baseline; border-radius: 0; white-space: nowrap;}span#inline-blue { background-color: #2780e3;}span#inline-purple { background-color: #9954bb;}span#inline-yellow { background-color: #f0ad4e;}span#inline-green { background-color: #5cb85c;} 主題配置文件 1&lt;span id="inline-blue"&gt; 主題配置文件 &lt;/span&gt; 主題配置文件 1&lt;span id="inline-purple"&gt; 主題配置文件 &lt;/span&gt; 主題配置文件 1&lt;span id="inline-yellow"&gt; 主題配置文件 &lt;/span&gt; 主題配置文件 1&lt;span id="inline-green"&gt; 主題配置文件 &lt;/span&gt;h1,h2,h3 标题前图示 打開 .\source\_data\styles.styl 加上 1234567891011121314151617181920212223242526272829303132333435/* 修改 h1 前面图标 */.posts-expand .post-body h1:before{ top: 10px; width: 18px; height: 18px; content: "🌈"; font-size: 18px; line-height: 18px; margin-right: 16px; }/* 修改 h2 前面图标 */.posts-expand .post-body h2:before{ top: 10px; width: 18px; height: 18px; content: "🌞"; font: normal normal normal 14px/1 FontAwesome; font-size: 18px; line-height: 18px; margin-right: 16px}/* 修改 h3 前面图标 */.posts-expand .post-body h3:before{ top: 10px; width: 18px; height: 18px; content: "🔍"; font: normal normal normal 14px/1 FontAwesome; font-size: 18px; line-height: 18px; margin-right: 16px;} 請到 https://fontawesome.com/ 尋找喜歡的圖示替換。側欄加上近期文章 效果見本站 打開 .\themes\next\layout\_partials\sidebar\site-overview.swig 找到：1{%- if theme.links %}在上方加上以下代碼：1234567891011121314151617{% if theme.recent_posts %}&lt;div class="links-of-blogroll motion-element {{"links-of-blogroll-" + theme.recent_posts_layout}}"&gt;&lt;div class="links-of-blogroll-title"&gt; &lt;!-- 設定你要的 fa fa icon--&gt; &lt;i class="fa fa-history fa-{{theme.recent_posts_icon | lower}}"aria-hidden="true"&gt;&lt;/i&gt; {{theme.recent_posts_title}}&lt;/div&gt;&lt;ul class="links-of-blogroll-list"&gt; {% set posts = site.posts.sort('-date') %} {% for post in posts.slice('0','5') %} &lt;li&gt; &lt;a href="{{url_for(post.path) }}"title="{{post.title}}"target="_blank"&gt;{{post.title}}&lt;/a&gt; &lt;/li&gt; {% endfor %}&lt;/ul&gt;&lt;/div&gt;{% endif %} 然後打開 站點配置文件,加上：123recent_posts_title: 近期文章 recent_posts_layout: blockrecent_posts: true 自訂無序列表的圖示 效果 打開 .\source\_data\styles.styl 加上 12345//listul { list-style-image:url("圖片網址"); } 在 CSS 中常見的清單 (list) 屬性有以下幾種：list-style-typenone (沒有)disc (全黑圓圈)circle (空心圓圈)square (正方形)1234&lt;ul style='list-style-type:square;'&gt; &lt;li&gt; 正方形項目 1&lt;/li&gt; &lt;li&gt; 正方形項目 2&lt;/li&gt; &lt;/ul&gt;upper-latin (大寫拉丁文)lower-latin (小寫拉丁文)upper-roman (大寫羅馬文)1234&lt;ul style='list-style-type:upper-roman;'&gt; &lt;li&gt; 項目 1&lt;/li&gt; &lt;li&gt; 項目 2&lt;/li&gt; &lt;/ul&gt;lower-roman (小寫羅馬文)upper-alpha (大寫希臘文)lower-alpha (小寫希臘文)list-style-image1list-style-image:url([image_url]);list-style-position設定值為 “inside” 及 “outside”。預定值為 “outside”。1234&lt;ul style='list-style-position:inside;'&gt; &lt;li&gt; 第一個項目 &lt;br&gt; 第一項目的第二行 &lt;li&gt; 第二個項目 &lt;/ul&gt;第一個項目 第一項目的第二行 第二個項目 1234&lt;ul style='list-style-position:outside;'&gt; &lt;li&gt; 第一個項目 &lt;br&gt; 第一項目的第二行 &lt;li&gt; 第二個項目 &lt;/ul&gt; 第一個項目 第一項目的第二行 第二個項目 提供一個找圖示的好方法 EMOJI 找到想要的圖示 直接複製貼上到 google 搜索 選擇 圖片 搜索 或者 emojiterra 直接就有各種版本的 emoji 可以存取了。list-style以上提到的這三個 (list-style-style、list-style-position、及 list-style-image) 屬性可以被簡化為一個 list-style 屬性。這種做法稱為捷徑 (shortcut)。在這裡，屬性的順序並不重要。你也可以這樣寫：123ul { list-style: url("circle.gif") none inside; }來源：CSS 語法教學 鼠標樣式 將鼠標.cur 檔放在 blog\source\images 裡，然後打開 .\source\_data\styles.styl 加上 1234567/* 鼠標樣式 */* { cursor: url(/images/default.cur),auto;}:link { cursor: url(/images/pointer.cur),auto} 自定義文章版權聲明 打開 .\themes\next\layout\_marco\post.swig 搜索 1&lt;footer class="post-footer"&gt; 上方找到 123{%- if theme.creative_commons.license and theme.creative_commons.post %} {% include'../_partials/post/post-copyright.swig'with { post: post} %}{%- endif %} 刪除整段並加上：12345&lt;div&gt; {% if not is_index %} {% include'passage-end-tag.swig'%} {% endif %}&lt;/div&gt;打開 .\themes\next\layout\_marco\ 新建檔案 passage-end-tag.swig 加入：12345678910111213141516{% if theme.passage_end_tag.enabled %}&lt;div style="text-align:center;color: #ccc;font-size:14px;"&gt;------------ 本文結束 ------------&lt;/div&gt;&lt;br/&gt;&lt;div style="border-left: 4px solid orange;background-color:#f9f9f9;"&gt;&lt;div style="margin-left:15px;padding:15px;"&gt;&lt;font size="4" color="red"&gt;&lt;b&gt;【版權聲明】&lt;/b&gt;&lt;/font&gt;&lt;div class="post-copyright-link"&gt; {{__('post.copyright.link') + __('symbol.colon') }} {%- set postURL = post.url or post.permalink %} {{next_url(postURL, postURL, {title: post.title}) }}&lt;/div&gt;本文為博主 (&lt;a href="https://zenreal.github.io"&gt;ZEN&lt;/a&gt;) 原創文章，遵循 &lt;a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;CC BY-NC-SA 4.0&lt;/a&gt; 版權協議，轉載請附上原文出處鏈接和本聲明。&lt;/div&gt;&lt;/div&gt;{% endif %}P.S. 若是不需要文章結束提示文字，請把那段 div 刪除。 側欄圓角化 效果 打開 ..\themes\next\source\css\_variables\Pisces.styl 找到 &lt;sup&gt;border-radius-inner 與&lt;/sup&gt;border-radius 照下方格式修改：12$border-radius-inner = 0 0 16px 16px;$border-radius = 16px;打開 .\themes\next\source\css\_schemes\Pisces\_layout.styl 在最下方加入 123.sidebar { background-color: transparent;} 鏈接顏色更改 在.\themes\next\source\css\_common\components\post\post.styl最下方加上 1234567891011// 文章内鏈接文本樣式.post-body p a{ color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover { color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; }} 第一個 color 指的是鏈接顯示的顏色，第二個 color 是移上去顯示的顏色。效果參考本站 BLOG 加上背景圖片 將背景圖片放在 BLOG 根目錄 \source\images打開 .\source\_data\styles.styl 加上 1234567891011121314@media screen and (min-width:1200px) { body { background-image:url(/images/5be1579bc7da3.jpg); // 這邊修改成你的背景圖片 background-repeat: no-repeat; background-attachment:fixed; background-position:50% 50%; } #footer a { color:#eee; }} 若是對隨機背景有興趣的可以參考我的另一篇文：Hexo 搭建系列 - BLOG 隨機背景切換 。BLOG 文章區塊透明化 打開 .\source\_data\styles.styl 加上 12345678910111213141516171819202122232425// page-opacity.post-block {background: rgba(255, 255, 255, 0.85);}.sidebar { opacity: 0.85;}.header-inner { background: rgba(255,255,255,0.85);}.pagination { background: rgba(255,255,255,0.85);}.popup { opacity: 0.9;}.comments { opacity: 0.85;} 若是使用上方代碼使得 note 也變得透明，可以在 .\source\_data\styles.styl 加上 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102// 自定義 note 樣式.post-body .note { position: relative; padding: 15px; margin-bottom: 20px; border: initial; border-left: 3px solid #eee; background-color: #f9f9f9; border-radius: 10px;}.post-body .note h2,.post-body .note h3,.post-body .note h4,.post-body .note h5,.post-body .note h6 { margin-top: 0; margin-bottom: 0; border-bottom: initial; padding-top: 0 !important;}.post-body .note p:first-child,.post-body .note ul:first-child,.post-body .note ol:first-child,.post-body .note table:first-child,.post-body .note pre:first-child,.post-body .note blockquote:first-child { margin-top: 0;}.post-body .note p:last-child,.post-body .note ul:last-child,.post-body .note ol:last-child,.post-body .note table:last-child,.post-body .note pre:last-child,.post-body .note blockquote:last-child { margin-bottom: 0;}.post-body .note.default { background-color: #f7f7f7; border-left-color: #777;}.post-body .note.default h2,.post-body .note.default h3,.post-body .note.default h4,.post-body .note.default h5,.post-body .note.default h6 { color: #777;}.post-body .note.primary { background-color: #f5f0fa; border-left-color: #6f42c1;}.post-body .note.primary h2,.post-body .note.primary h3,.post-body .note.primary h4,.post-body .note.primary h5,.post-body .note.primary h6 { color: #6f42c1;}.post-body .note.info { background-color: #eef7fa; border-left-color: #428bca;}.post-body .note.info h2,.post-body .note.info h3,.post-body .note.info h4,.post-body .note.info h5,.post-body .note.info h6 { color: #428bca;}.post-body .note.success { background-color: #eff8f0; border-left-color: #5cb85c;}.post-body .note.success h2,.post-body .note.success h3,.post-body .note.success h4,.post-body .note.success h5,.post-body .note.success h6 { color: #5cb85c;}.post-body .note.warning { background-color: #fdf8ea; border-left-color: #f0ad4e;}.post-body .note.warning h2,.post-body .note.warning h3,.post-body .note.warning h4,.post-body .note.warning h5,.post-body .note.warning h6 { color: #f0ad4e;}.post-body .note.danger { background-color: #fcf1f2; border-left-color: #d9534f;}.post-body .note.danger h2,.post-body .note.danger h3,.post-body .note.danger h4,.post-body .note.danger h5,.post-body .note.danger h6 { color: #d9534f;} 修改 BLOG 標題及頁腳顏色 打開 .\source\_data\styles.styl 選擇性加上自己要修改的部分代碼。123456789101112131415161718192021222324// 改掉題頭顏色 .site-meta { background: #F0D784; // 修改為自己喜歡的顏色}// 主標題顏色.brand{ color: #2f9833 }// 副標題顏色.site-subtitle{ color: #47b54a}// 頁腳統計文字顏色.footer{ color: #F0D784}// 修改頁腳備案鏈接顏色.footer a{ color: #F0D784}// 修改頁腳統計人數的顏色.footer .with-love{ color: #F0D784}MAC PANEL 風格 code 兩種風格，一種 normal 一種 night eighties。(1)night eighties效果 12TESTMAC PANEL CODE 打開 .\source\_data\styles.styl 加上 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354// mac panel.highlight-wrap[data-rel] { position: relative; overflow: hidden; border-radius: 5px; box-shadow: 0 10px 30px 0px rgba(0, 0, 0, 0.4); margin: 35px 0; ::-webkit-scrollbar { height: 10px; } ::-webkit-scrollbar-track { -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3); border-radius: 10px; } ::-webkit-scrollbar-thumb { border-radius: 10px; -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.5); } &amp;::before { color: white; content: attr(data-rel); height: 38px; line-height: 38px; background: #21252b; color: #fff; font-size: 16px; position: absolute; top: 0; left: 0; width: 100%; font-family: 'Source Sans Pro', sans-serif; font-weight: bold; padding: 0px 80px; text-indent: 15px; float: left; } &amp;::after { content: ''; position: absolute; -webkit-border-radius: 50%; border-radius: 50%; background: #fc625d; width: 12px; height: 12px; top: 0; left: 20px; margin-top: 13px; -webkit-box-shadow: 20px 0px #fdbc40, 40px 0px #35cd4b; box-shadow: 20px 0px #fdbc40, 40px 0px #35cd4b; z-index: 3; }} 然後記得在 主題配置文件 修改 highlight 主題。1highlight_theme: night eighties根據個人需要修改參數即可。(2)normal如果你想使用 1highlight_theme: normal 打開 .\source\_data\styles.styl 加上 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657// mac panel.highlight-wrap[data-rel] { position: relative; overflow: hidden; border-radius: 5px; //box-shadow: 0 10px 30px 0px rgba(0, 0, 0, 0.4); box-shadow:18px 18px 15px 0px rgba(0,0,0,.4) margin: 35px 0; ::-webkit-scrollbar { height: 10px; } ::-webkit-scrollbar-track { -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3); border-radius: 10px; } ::-webkit-scrollbar-thumb { border-radius: 10px; -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.5); } &amp;::before { color: white; content: attr(data-rel); height: 30px; line-height: 38px; //background: #21252b; background: #108414de; color: #fff; font-size: 16px; position: absolute; top: 0; left: 0; width: 100%; //font-family:'Source Sans Pro', sans-serif; font-weight: bold; padding: 0px 80px; text-indent: 15px; float: left; } &amp;::after { content: ' '; position: absolute; -webkit-border-radius: 50%; border-radius: 50%; background: #fc625d; width: 12px; height: 12px; top: 0; left: 20px; margin-top: 13px; -webkit-box-shadow: 20px 0px #fdbc40, 40px 0px #35cd4b; box-shadow: 20px 0px #fdbc40, 40px 0px #35cd4b; z-index: 3; }} 若是你有開啟 code copy 功能 (default 風格)，可能會造成樣式跑掉， 你可以打開 .\themes\next\source\css\_common\scaffolding\highlight\copy-code.styl 找到 123456789else { background-color: $gainsboro; background-image: linear-gradient(#fcfcfc, $gainsboro); border: 1px solid #d5d5d5; border-radius: 3px; font-size: $font-size-smaller; right: 4px; top: 8px; } 將 top 改為 -31px;。 標題科技風特效 效果見本站。打開 .\source\_data\styles.styl 加上 1234567891011121314151617181920// 標題特效.site-title:hover, .post-title:hover { animation: shake-it .5s reverse infinite cubic-bezier(0.68, -0.55, 0.27, 1.55);}@keyframes shake-it { 0% { text-shadow: 0 0 rgba(0, 255, 255, .5), 0 0 rgba(255, 0, 0, .5); } 25% { text-shadow: -2px 0 rgba(0, 255, 255, .5), 2px 0 rgba(255, 0, 0, .5); } 50% { text-shadow: -5px 0 rgba(0, 255, 255, .5), 3px 0 rgba(255, 0, 0, .5); } 100% { text-shadow: 3px 0 rgba(0, 255, 255, .5), 5px 0 rgba(255, 0, 0, .5); }} 文章加入每日一句 是使用這篇文章的方法 为您的 Hexo 博客添加 Hitokoto 一言功能 ，文章內有很多詳細的代碼解釋。 根據放置位置的不同需要修改的檔案也不同：選擇一、放在文章目錄 + 本站概要的下方 在 .\themes\next\layout\_custom\sidebar.swig 適當位置加入下方代碼 選擇二、只放在本站概要下方 在 themes\hexo-theme-next-7.4.1\layout\_partials\sidebar\site-overview.swig 適當位置加入下方代碼 123456789101112131415161718192021222324252627&lt;!-- hitokoto --&gt;&lt;div class="hitokoto-title"&gt; &lt;i class="fa fa-quote-right"&gt;&lt;/i&gt; &lt;b&gt; 一言 &lt;/b&gt;&lt;/div&gt;&lt;div id="hitokoto"&gt;:D 獲取中...&lt;/div&gt;&lt;i id="hitofrom"&gt;:D 獲取中...&lt;/i&gt;&lt;script src="https://cdn.jsdelivr.net/npm/bluebird@3/js/browser/bluebird.min.js"&gt;&lt;/script&gt;&lt;script src="https://cdn.jsdelivr.net/npm/whatwg-fetch@2.0.3/fetch.min.js"&gt;&lt;/script&gt;&lt;script&gt; fetch('https://v1.hitokoto.cn') .then(function (res){ return res.json(); }) .then(function (data) { var hitokoto = document.getElementById('hitokoto'); hitokoto.innerText = '\xa0\xa0\xa0\xa0\xa0\xa0\xa0' + data.hitokoto; var hitofrom = document.getElementById('hitofrom'); hitofrom.innerText = "——" + data.from + '\xa0'; }) .catch(function (err) { console.error(err); })&lt;/script&gt; 然後打開 .\source\_data\styles.styl 加上 1234567891011121314151617//hitokoto.hitokoto-title { text-align: center; font-size: 12px;}#hitokoto { font-family: "Microsoft YaHei"; font-size: 11px;}#hitofrom { float: right; font-family: "Microsoft YaHei"; font-size: 10px;} 自定義短 code 樣式 效果 這個就是效果~在 .\source\_data\styles.styl 加上：123456789101112131415// Custom styles.code { color: #c7254e; // 文字顏色 background: #f9f2f4; // 底色 margin: 2px;}// 邊框的自定義樣式.highlight, pre { margin: 5px 0; padding: 5px; border-radius: 3px;}.highlight, code, pre { border: 1px solid #d6d6d6;} 去掉圖片邊框 在.\source\_data\styles.styl加上：1234/* 去掉圖片邊框 */.posts-expand .post-body img{ border: 0px;}修改選中文字底色 請自行在本站選取文字查看效果。在 .\source\_data\styles.styl 加上：1234567891011// 修改選中文字底色 /* webkit, opera, IE9 */::selection { background: #00c4b6; color: #f7f7f7; }/* firefox */::-moz-selection { background: #00c4b6; color: #f7f7f7; } 插入音樂與影片 1{% video url %}Examples:12{% video https://example.com/sample.mp4 %}{% video /path/to/your/video.mp4 %} 其他請參考 Hexo 搭建系列 - 插入音樂與影片Disqus 回覆 請參考 Hexo 搭建系列 - 為 HEXO 安裝 Disqus 評論功能 注腳 安裝 hexo-footnotes 插件 1npm install hexo-footnotes --save 請參考 hexo-footnotes 點頭像回到首頁 打開 .\themes\next\layout\_partials\sidebar\site-overview.swig找到 1{%- if theme.avatar.url %} 下方加上 1&lt;a href="/"&gt; 完整程式碼如下 123456{%- if theme.avatar.url %} &lt;a href="/"&gt; &lt;img class="site-author-image" itemprop="image" src="{{url_for( theme.avatar.url | default(theme.images +'/avatar.gif') ) }}" alt="{{author}}"&gt; {%- endif %} 還有很多功能我沒用到我就沒介紹…可以自行摸索。推薦安裝的插件 下方是我在文章中都沒有提到的功能，都是很簡單的小插件，可以自行摸索。hexo-filter-sup: 文字上標 hexo-filter-sub: 文字下標hexo-filter-auto-spacing: 中英文之間自動空格hexo-ruby-character: ruby markuphexo-tag-details: 摺疊文字hexo-tag-cplayer: 音樂播放器 延伸閱讀Hexo 搭建系列 - SEO 優化篇Hexo 搭建系列 - hexo-abbrlink 插件 永久鏈接Hexo 搭建系列 - 在 BLOG 中插入 Emoji 表情 document.querySelectorAll('.github-emoji') .forEach(el => {if (!el.dataset.src) {return;} const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => {img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => {img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安裝 Hexo Next 主題網頁顯示空白]]></title>
    <url>%2Fposts%2F51517%2F</url>
    <content type="text"><![CDATA[前言 終於還是從 Butterfly 轉成 Next 主題了，每次爬文發現大家都使用 next 主題做教程，有些檔案在我的主題裡名稱不一樣甚至格式也不一樣導致 code 寫法不同，找尋這些花了不少時間，最終決定也合流使用 next 主題了 (畢竟懶…)。 但是在我安裝 next 主題之後打開網頁卻是空白的，搞了半天發現是 motion 設置的問題，修改成 false 之後就可以正常開啟了。問題 安裝 / 換成 next 主題 "有可能" 遇到以下問題：motion 未設置成 falseGitHub Pages 禁止了 source/vendors 目錄訪問 theme 設置處缺少空白或格式錯誤 沒有 hexo clean解決方式 motion 設置 我猜測可能是頁面動畫導致網頁顯示空白，因此我將它設置成 false 就能正常顯示了。GitHub Pages 禁止了 source/vendors 目錄訪問 我倒是沒遇到這個問題，有這個問題的可以參考：Hexo next 主题显示全白是什么原因？请问 hexo next 主题 deploy 到 GitHub 后不显示内容只显示框架这个问题怎么解决？網站配置文件 中 theme 格式錯誤 注意格式必須為以下：1theme: nexttheme: 後方必需要有一個半形空格，且 theme 前方不能有別的東西。安裝主題後沒有 hexo clean1hexo cleanhexo clean 用來清除快取檔案 (db.json) 和已產生的靜態檔案 (public)。每次安裝完主題記得要 clean。 document.querySelectorAll('.github-emoji') .forEach(el => {if (!el.dataset.src) {return;} const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => {img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => {img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 搭建系列 - 在 BLOG 中插入 Emoji 表情]]></title>
    <url>%2Fposts%2F25926%2F</url>
    <content type="text"><![CDATA[🍑 🍇 🍐 🍓 🍌 🍉 🍍 🍋 🍎HEXO 預設的 markdown 渲染器是 hexo-renderer-marked，這個渲染器並不支援插件擴展，所以我們需要卸載它改裝hexo-renderer-markdown-it 。 而 hexo-renderer-markdown-it 原裝包含了以下插件：- markdown-it-abbr- markdown-it-footnote- markdown-it-ins- markdown-it-sub- markdown-it-sup並不包含 emoji 插件，因此我們還要安裝 markdown-it-emoji 來插入表情。安裝 STEP 1 首先卸載 hexo-renderer-marked 然後再安裝 hexo-renderer-markdown-it。12npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-markdown-it --saveSTEP 2安裝 markdown-it-emoji：1npm install markdown-it-emoji --saveSTEP 3打開 config.yml 加入以下內容：123456789101112131415161718192021markdown: render: html: true xhtmlOut: false breaks: true linkify: true typographer: true quotes: '“”‘’' plugins: - markdown-it-abbr - markdown-it-footnote - markdown-it-ins - markdown-it-sub - markdown-it-sup - markdown-it-emoji anchors: level: 2 collisionSuffix: 'v' permalink: true permalinkClass: header-anchor permalinkSymbol: ''STEP 4使用方法：在 emoji-cheat-sheet 中查找想貼上的表情，例如 💥則直接在文章中對應編碼 :boom: 就能顯示。參考資料hexo-renderer-markdown-it document.querySelectorAll('.github-emoji') .forEach(el => {if (!el.dataset.src) {return;} const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => {img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => {img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 搭建系列 - SEO 優化篇]]></title>
    <url>%2Fposts%2F7993%2F</url>
    <content type="text"><![CDATA[首先嘗試在 google 搜索 site: 你的域名 ，來確認你的 BLOG 有沒有被收錄，能搜索到代表有被收錄，若無則沒有。 一般優化 文章鏈接優化 請參考：Hexo 搭建系列 - Hexo-Abbrlink 插件 永久鏈接 增加 nofollow 標籤 這是反垃圾鏈接標籤，用於指示搜尋引擎不要抓取網頁上帶有 nofollow 標籤的任何出站鏈接，減少垃圾鏈接分散網站權重。你可以使用 hexo-filter-nofollow 插件。添加 robots.txt在./source 新建 robots.txt 填寫以下內容：123456789101112User-agent: *Allow: /Allow: /archives/Allow: /categories/Allow: /tags/ Disallow: /vendors/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/Disallow: /fancybox/Sitemap: http:// 你的網域 /sitemap.xmlUser-agent: * 表示運行所有的搜尋引擎，你也可以設定只允許特定的搜尋引擎爬取，例如 User-agent: GooglebotAllow 表示允許被訪問的，Disallow是不允許的意思。Disallow不添加任何路徑就表示運行爬取任何內容。(若要 Disallow 多個資料夾或檔案, 需要分成多行來寫, 一行只能寫一個)關鍵詞與描述 在\scaffolds\post.md中添加如下代碼，用於生成的文章中添加關鍵字和描述。12keywords:description:Sitemap什麼是 Sitemap？「Sitemap」是一種檔案，您可以在其中提供網站中網頁、影片和其他檔案的相關資訊，並說明各種網頁和檔案之間的關係。Google 這類搜尋引擎會讀取 Sitemap 檔案，以更靈活的方式檢索您的網站。Sitemap 會向檢索器顯示您認為網站上的哪些檔案較為重要，並針對這類檔案提供有價值的資訊：舉例來說，Sitemap 會針對網頁提供最近更新時間、變更頻率以及替代語言版本等相關資訊。您可以透過下列幾種方式讓 Google 存取您的 Sitemap：使用 Search Console Sitemap 工具向 Google 提交 Sitemap在 robots.txt 檔案中任一處插入以下這一行字元，指定 Sitemap 的路徑。1Sitemap: http://example.com/sitemap.xml透過「連線偵測 (ping)」功能要求 Google 檢索您的 Sitemap。請按照下列方式傳送 HTTP GET 要求：1http://www.google.com/ping?sitemap=&lt;complete_url_of_sitemap&gt;例如：1http://www.google.com/ping?sitemap=https://example.com/sitemap.xmlSTEP 1安裝 hexo-sitemap-generator 外掛可以自動幫你的 BLOG 產生 Sitemap.xml，你只需要打開 BLOG 根目錄 Git Bash 輸入以下指令：1npm install hexo-generator-sitemap --save安裝完後瀏覽你的 網址 /sitemap.xml，就會發現已經生成了。可以把 sitemap 提交到 GSC 來增加收錄。STEP 2設定 config.yml。12sitemap: path: sitemap.xmlSTEP 3 註冊 Google Search Console https://search.google.com/search-console/about?hl=zh-tw使用 google 帳號登陸即可。貼上 BLOG 網址點擊「繼續」，因為我已經加入 Google Analytics 到我的 BLOG，所以我可以通過 Google Analytics 帳號來驗證。你也可以在 [設定 - 擁有權驗證 - 其他驗證方法] 使用其他方法驗證。STEP 4到 [Google Search Console 後台 - Sitemap - 新增 Sitemap] 填寫 sitemap.xml。 等待幾天就能夠在 google 上搜尋到自己的網站了。Google 無法讀取 sitemap(一般的 HTTP 錯誤) 解決方式 我剛開始提交 sitemap 的時候試了無數次發現總是出現 無法讀取 Sitemap , 一般的 HTTP 錯誤 這個錯誤，為此我在 google 上查找了許久都沒有找到解決方式，於是我開始閱讀 google 的 sitemap 說明 ，在 Sitemap 格式處發現了問題所在。 若你跟我有一樣的問題，你可以打開 你的網址 /sitemap.xml 查看你的時間格式是否為 &lt;lastmod&gt;2019-09-29T09:52:32Z&lt;/lastmod&gt;你能發現跟官方的 &lt;lastmod&gt;2018-06-04&lt;/lastmod&gt; 差在多了後面多了 T 時分秒 Z…等一些沒必要的格式，我猜這就是問題所在， 於是 google 搜尋了解決辦法，參考 Convert an ISO date to the date format yyyy-mm-dd in JavaScript 找到了解決辦法。以下是解決方式：打開 .\node_modules\hexo-generator-sitemap\sitemap.xml 在 1post.updated.toISOString() 後方加上 1.substring(0, 10)substring(Start,End) 意思是擷取從 0 開始到 9 位數(End 位數不會擷取)，本來是 2019-09-29T09:52:32Z，就只會擷取到 2019-09-29，這樣就是官方所要求的格式。 重新提交 sitemap 之後等待一會就會顯示成功了。現在已經能在 google 搜尋到我的網站了。參考資料 hexo-generator-sitemapHexo 优化：提交 sitemap 及解决百度爬虫无法抓取 GitHub Pages 链接问题Hexo 做 SEO 优化遇到的坑Hexo Seo 优化让你的博客在 google 搜索排名第一 管理您的 Sitemap, 建立並提交 SitemapConvert an ISO date to the date format yyyy-mm-dd in JavaScript document.querySelectorAll('.github-emoji') .forEach(el => {if (!el.dataset.src) {return;} const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => {img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => {img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 搭建系列 - 為 HEXO 安裝 Disqus 評論功能]]></title>
    <url>%2Fposts%2F38797%2F</url>
    <content type="text"><![CDATA[註冊與安裝 STEP 1 到Disqus 官網 選擇 GET STARTED 然後註冊一個帳號 (在此省略註冊過程)。STEP 2 登入 Diqcus 之後選擇 [I want to install Disqus on my site]。STEP 3 填入網站資料 (沒重複的話，Website name 就是你的 shortname)。STEP 4 到 Admin - Settings - General - shortname，確認一下你的 shortname。注意：若你的 Websit Name 重複，shortname 則將與 Websit Name 不同，請務必注意。STEP 5打開 config.yml 加入以下內容：大於 5.1.1 版本：12345#Disqusdisqus: enable: true #開啟功能 shortname: 你的 shortname count: true #在文章中顯示評論數量 小於 5.1.1 版本 則設定 shortname 值即可：12#Disqusdisqus_shortname: 你的 shortname大部分 HEXO 主題都可以設定是否開啟 disqus 功能 (如 NexT,Butterfly…等)，打開主題的配置文件搜索 disqus 試試吧。 效果演示：Reactions 功能 Admin - Settings - Reactions - Enable Reactions on your site. 若想要關閉 Reactions 功能則點擊下方 [Turn reactions off] 即可。Reactions 功能效果： document.querySelectorAll('.github-emoji') .forEach(el => {if (!el.dataset.src) {return;} const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => {img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => {img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[線上快速將 Twitter 影片轉成 GIF 檔]]></title>
    <url>%2Fposts%2F19600%2F</url>
    <content type="text"><![CDATA[EZGIF網址：https://ezgif.com/video-to-gif使用方法 格式：MP4, WebM, AVI, MPEG, FLV, MOV, 3GP and other video files | 大小限制：100MBSTEP 1在 Twitter 上找到想轉換成 GIF 的影片，在影片上點擊右鍵－複製影片地址 STEP 2 貼到 Video to GIF converter 點擊 upload video 即可。EZGIF 提供了簡單的功能，例如畫面裁剪、影片裁剪、旋轉、縮放、修改速度、加字、自行選擇 FPS 和大小…等。轉換後直接在 GIF 上點擊右鍵儲存圖片。範例 document.querySelectorAll('.github-emoji') .forEach(el => {if (!el.dataset.src) {return;} const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => {img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => {img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>線上工具</category>
      </categories>
      <tags>
        <tag>Twitter</tag>
        <tag>GIF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手動安裝 Google Chrome 擴充功能]]></title>
    <url>%2Fposts%2F58580%2F</url>
    <content type="text"><![CDATA[此方法適用於 開發者已下架或是遭官方下架無法從擴充商店安裝的擴充功能，但你能在其他地方找到.CRX 檔或資料夾。 教程以 Listen 1作為範例。STEP 1打開 Chrome 瀏覽器的擴充功能頁面 (或者在網址輸入 chrome://extensions/)。STEP 2在右上角打開 [開發人員模式] 左邊選擇[載入未封裝項目]。STEP 3 選擇擴充功能資料夾。STEP 4開啟擴充功能即可在瀏覽器右上方看見，並且使用。若擴充功能非資料夾而是.CRX 檔，請使用 7-ZIP 解壓縮放進資料夾後按以上步驟載入。 document.querySelectorAll('.github-emoji') .forEach(el => {if (!el.dataset.src) {return;} const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => {img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => {img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>chrome</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 搭建系列 - 利用 HEXO-ADMIN 插件後台管理 BLOG]]></title>
    <url>%2Fposts%2F19908%2F</url>
    <content type="text"><![CDATA[安裝 在 BLOG 根目錄使用 GIT BASH 輸入下方指令安裝 HEXO-ADMIN，並開啟本地測試。123npm install --save hexo-adminhexo server -dopen http://localhost:4000/admin/安裝成功後打開瀏覽器輸入 就能看見後台。但這樣還不算完成，我們還需要在 BLOG 根目錄新建檔案 hexo-generate.bat，寫入hexo g -d。 然後打開 config.yml，新增：12admin: deployCommand: 'hexo-generate.bat' 若不添加則會出現 Error: Config value "admin.deployCommand" not found 或者 Error: spawn hexo ENOENT 之類的報錯。你還可以在設定後台帳號和密碼。Settings - Setup authentification here.輸入帳號密碼，下方 Admin Config Section 會自動產生相對應的 code，你只需要複製貼上到剛剛 config.yml 的 admin 處即可。部署方式 後台 - Deploy - 直接點擊 Deploy 鍵，若無出現錯誤就是部署成功了。參考資料jaredly/hexo-admin document.querySelectorAll('.github-emoji') .forEach(el => {if (!el.dataset.src) {return;} const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => {img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => {img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 搭建系列 - 在文章中插入色碼方塊]]></title>
    <url>%2Fposts%2F25045%2F</url>
    <content type="text"><![CDATA[安裝方式 在 blog 根目錄右鍵 -&gt;Git Bash 輸入指令：1npm i hexo-tag-color-block使用方式 直接在文章中加入語法：1{% colorblock [color hex code] [width] [height] %}色碼表 DEMO：&nbsp;#E6E6FA 配置預設寬高 在config.yml中加入：12345code_block: width: height: # whether you want to show hex code text:Default:1234code_block: width: 10 height: 10 text: true參考資料hexo-tag-color-block document.querySelectorAll('.github-emoji') .forEach(el => {if (!el.dataset.src) {return;} const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => {img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => {img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 搭建系列 - hexo-abbrlink 插件 永久鏈接]]></title>
    <url>%2Fposts%2F2470%2F</url>
    <content type="text"><![CDATA[前言 打開_config.yml 可以看到預設的永久鏈接是依照日期來產生的。1permalink: :year/:month/:day/:title/假設 hello world.md 原路徑為 /source/_posts/hello world.md 按照預設的鏈接來生成靜態文件後路徑會變成 /public/2019/09/23/hello world/index.html 但是這樣的缺點是 鏈接太長 ，所以在這邊推薦一個插件 abbrlink 來調整，abbrlink 的概念是對標題 + 時間進行 md5 然後再轉 base64，保存在 front-matter 中。 安裝 在 blog 根目錄下 git bash 輸入指令 npm install hexo-abbrlink --save 安裝 abbrlink接著在_config.yml 的 permalink 後面改成如下格式：1permalink: posts/:abbrlink/接著在下方隨機處加上：123abbrlink: alg: crc32 #support crc16(default) and crc32 ,crc16 的最大帖子數是 65535。 rep: hex #support dec(default) and hex有兩種設置：alg(算法)：crc16(默認)或 crc32rep(表示)：dec(默認，十進制)或 hex(十六進制)以下是各種搭配的效果範例 crc16 &amp; hexhttps://post.zz173.com/posts/66c8.htmlcrc16 &amp; dechttps://post.zz173.com/posts/65535.htmlcrc32 &amp; hexhttps://post.zz173.com/posts/8ddf18fb.htmlcrc32 &amp; dechttps://post.zz173.com/posts/1690090958.html 只要打開文章.md 就能在配置區看到自動產生的 abbrlink: 編號 啦！更多信息 參考資料hexo-abbrlinkhexo 指南 document.querySelectorAll('.github-emoji') .forEach(el => {if (!el.dataset.src) {return;} const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => {img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => {img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>abbrlink</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 搭建系列 - 插入音樂與影片]]></title>
    <url>%2Fposts%2F61856%2F</url>
    <content type="text"><![CDATA[推薦網站 youtaker 揚天音樂 音樂直鏈搜索 插入音樂 有幾種方法可以插入音樂：HTML 標籤 MeingJS 方式hexo-tag-aplayer 插件HTML1) 直接使用標籤寫 1&lt;audio src="mp3 網址 " style="max-height :100%; max-width: 100%; display: block; margin-left: auto; margin-right: auto;" controls="controls" loop="loop" preload="meta"&gt;Your browser does not support the audio tag.&lt;/audio&gt;Your browser does not support the audio tag.2)iframe 直接複製音樂平台提供的外鏈方式 (以網易雲為例)： 單首 12345&lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&amp;id= 網易雲歌曲 id&amp;auto=0&amp;height=66"&gt;&lt;/iframe&gt; 歌單 1&lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=450 src="//music.163.com/outchain/player?type=0&amp;id= 網易雲歌單 id&amp;auto=1&amp;height=430"&gt;&lt;/iframe&gt; HEXO 內置 iframe 標籤1{% iframe url [width] [height] %}3)Embed 直接複製音樂平台提供的外鏈方式 1&lt;embed src="http://www.youtaker.com/video2015/v2007/swf/m.swf" width="336" height="100" bgcolor="#FFFFFF" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="file=http://www.youtaker.com/video/v/nu/4b8604f40a6547538970fde857f2c50f85.xml&amp;linkfromdisplay=false&amp;showdigits=true&amp;autostart=true&amp;repeat=true&amp;showfsbutton=false&amp;showeq=true" /&gt;MeingJS 文章開頭添加 (或修改主題)123&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer@1.7.0/dist/APlayer.min.css"&gt;&lt;script src="https://cdn.jsdelivr.net/npm/aplayer@1.7.0/dist/APlayer.min.js"&gt;&lt;/script&gt;&lt;script src="https://cdn.jsdelivr.net/npm/meting@1.1.0/dist/Meting.min.js"&gt;&lt;/script&gt; 在文章插入 1&lt;div class="aplayer" data-id=" 歌曲 id" data-server="netease" data-type="song" data-mode="single"&gt;&lt;/div&gt; 標籤參數 title : 曲目標題author: 曲目作者url: 音樂文件 URL 地址picture_url: (可選) 音樂對應的圖片地址narrow: （可選）播放器袖珍風格autoplay: (可選) 自動播放，移動端瀏覽器暫時不支持此功能width:xxx: (可選) 播放器寬度 (默認: 100%)lrc:xxx: （可選）歌詞文件 URL 地址 效果：hexo-tag-aplayer 插件 進入 blog 目錄，打開 git bash 輸入 npm install hexo-tag-aplayer --save 安裝 Aplayer 插件。文章內輸入語法即可。 單首 1{% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %} 標籤參數 title : 曲目標題author: 曲目作者url: 音樂文件 URL 地址picture_url: (可選) 音樂對應的圖片地址narrow: （可選）播放器袖珍風格autoplay: (可選) 自動播放，移動端瀏覽器暫時不支持此功能width:xxx: (可選) 播放器寬度 (默認: 100%)info@lrc:xxx: （可選）歌詞文件 URL 地址 歌單 123456789101112131415161718192021222324252627{% aplayerlist %}{"narrow": false, // （可選）播放器袖珍風格"autoplay": true, // （可選) 自動播放，移動端瀏覽器暫時不支持此功能"mode":"random", // （可選）曲目循環類型，有'random'（隨機播放）,'single'(單曲播放),'circulation'(循環播放),'order'(列表播放)， 默認：'circulation'"showlrc": 3, // （可選）歌詞顯示配置項，可選項有：1,2,3"mutex": true, // （可選）該選項開啟時，如果同頁面有其他 aplayer 播放，該播放器會暫停"theme":"#e6d0b2", | // （可選）播放器風格色彩設置，默認：#b7daff"preload":"metadata", // （可選）音樂文件預載入模式，可選項：'none''metadata' 'auto', 默認: 'auto' "listmaxheight": "513px", // (可選) 該播放列表的最大長度 "music": [ { "title": "歌名", "author": "歌手", "url": "歌曲網址", "pic": "專輯圖", "lrc": "歌詞檔" }, { "title": "歌名", "author": "歌手", "url": "歌曲網址", "pic": "專輯圖" } ]}{% endaplayerlist %} 歌詞 123{% aplayerlrc "title" "author" "url" "autoplay" %}[00:00.00]lrc here{% endaplayerlrc %} 吸底模式 12345678910const ap = new APlayer({ container: document.getElementById('player'), fixed: true, audio: [{ name: 'name', artist: 'artist', url: 'url.mp3', cover: 'cover.jpg', }]}); 迷你模式 12345678910const ap = new APlayer({ container: document.getElementById('player'), mini: true, audio: [{ name: 'name', artist: 'artist', url: 'url.mp3', cover: 'cover.jpg', }]}); 但這樣一首一首加非常麻煩啊！MeingJS 支持 (3.0 新功能)MetingJS 是基于 Meting API 的 APlayer 衍生播放器，引入 MetingJS 后，播放器将支持对于 QQ 音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。在 config.yml 加上：12aplayer: meting: true就可以更便利的插入音樂平台的歌曲了。 單首歌或歌單 1{% meting "歌曲 id/ 歌單 id" "音樂平台" "song(playlist)" "mutex:false" "listmaxheight:340px" "preload:none" "theme:#ad7a86"%} 效果 參數 預設 值id必要 歌曲 id / 歌單 id / album id / search keywordserver必要 音樂平台:netease(網易雲),tencent,kugou,xiami,baidutype必要 song(單首),playlist(歌單),album,search,artistfixedfalse 吸底模式 minifalse 迷你模式 (只有一張專輯圖大小)loopall 循環播放, 值:‘all’(一直), ‘one’(一次), ‘none’(從不)orderlist值: ‘list’, ‘random’volume0.7預設音量 mutextrue 互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器 listfoldedfalse 音樂播放列表是否摺疊 autoplaytrue 自動播放歌曲 (不適用於手機)theme#ad7a86 播放器色彩設置 PJAX 兼容 若在 Hexo 中使用了 PJAX，可能需要自己手動清理 APlayer 全局實例：12345678$(document).on('pjax:start', function () { if (window.aplayers) { for (let i = 0; i &lt; window.aplayers.length; i++) { window.aplayers[i].destroy(); } window.aplayers = []; }});自定義配置（3.0 新功能）現在你可以在 Hexo 配置文件 config.yml 中配置本插件：12345678910aplayer: script_dir: some/place # Public 目錄下腳本目錄路徑，默認: 'assets/js' style_dir: some/place # Public 目錄下樣式目錄路徑，默認: 'assets/css' cdn: http://xxx/aplayer.min.js # 引用 APlayer.js 外部 CDN 地址 (默認不開啟) style_cdn: http://xxx/aplayer.min.css # 引用 APlayer.css 外部 CDN 地址 (默認不開啟) meting: true # MetingJS 支持 meting_api: http://xxx/api.php # 自定義 Meting API 地址 meting_cdn: http://xxx/Meing.min.js # 引用 Meting.js 外部 CDN 地址 (默認不開啟) asset_inject: true # 自動插入 Aplayer.js 與 Meting.js 資源腳本, 默認開啟 externalLink: http://xxx/aplayer.min.js # 老版本參數，功能與參數 cdn 相同 其他問題解決方式參考 官方 README.MD插入影片 與音樂大同小異，會插入音樂就會插入影片了。1)HTML 標籤 1&lt;video poster="https:// 封面.jpg" src="https:// 影片網址.mp4" style="max-height :100%; max-width: 100%; display: block; margin-left: auto; margin-right: auto;" controls="controls" loop="loop" preload="meta"&gt;Your browser does not support the video tag.&lt;/video&gt;2) 使用 hexo-the-dplayer 插件 在 blog 根目錄 Git Bash npm install hexo-tag-dplayer --save 來安裝 Dplayer 插件 在 blog 中寫法 1{% dplayer "url=https:// 影片網址.mp4" "https:// 封面.jpg" "api=https://api.prprpr.me/dplayer/" "id= 自己取" "loop=false" %} 可直接使用 官網 api參考資料 markdown 插入音乐hexo-tag-aplayerhexo 插入音乐与视频 从零开始建立个人博客 V：插入音视频 document.querySelectorAll('.github-emoji') .forEach(el => {if (!el.dataset.src) {return;} const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => {img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => {img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 搭建系列 - 基礎寫作流程篇]]></title>
    <url>%2Fposts%2F51388%2F</url>
    <content type="text"><![CDATA[前言 Hexo 系統寫作透過 Markdown 語法來寫作，若是對 Markdown 不熟悉，可以參考 這個網站 。Markdown 寫作環境 以下推薦免費並且親測可用的 Markdown 軟體以及在線編輯器。Markdown 編輯軟體 MarkdownPad (for Windows 適合新手) - https://markdownpad.com/BookPad - https://sosfos.wordpress.com/Boost Note - https://boostnote.io/Bear (iPhone, iPad, and Mac 適合新手) - https://bear.app/Typora - https://typora.io/Zettlr - https://www.zettlr.com/SimpleMDE - https://simplemde.com/Sublime Text 3 - https://www.sublimetext.com/Atom - https://atom.io/Smark - https://gitee.com/elerao/SmarkMou(OS X 10.7 to 10.11 適合新手) - http://25.io/mou/Miu - https://github.com/egoist/MiuCommonMark - https://commonmark.org/Ghostwriter(for Windows and Linux) - https://wereturtle.github.io/ghostwriter/Notable - https://github.com/notable/notable 在線 Markdown 編輯器 MEditor(適合新手) - https://pandao.github.io/editor.md/en.htmlStack Edit (適合新手) - https://stackedit.io/DILLINGER (推薦老手使用) - https://dillinger.io/Markdown Live Preview (推薦老手使用) - https://markdownlivepreview.com/ 寫作流程 創建文章：1hexo new [layout] &lt;title&gt;編輯文章：通過 Markdown 編輯器修改。發布文章：將文章發布到你的 blog 上。創建文章 通過 Git Bash 輸入指令創建文章。1hexo new [layout] &lt;title&gt;您可以在指令中指定文章的佈局（layout），預設為 post，您可以透過修改_config.yml 中的 default_layout 設定來指定預設佈局。佈局（Layout）Hexo 有三種預設佈局：post、page 和 draft，它們分別對應不同的路徑，而您所自定的其他佈局和 post 相同，都儲存至 source/_posts 資料夾。佈局 路徑 post(發表) source/_postspage(頁面) sourcedraft(草稿) source/_drafts 檔案名稱 Hexo 預設以標題做為檔案名稱，但您可編輯 new_post_name 設定來變更預設的檔案名稱， 舉例來說，設為下方格式可讓您更方便的透過日期來管理文章。1:year-:month-:day-:title.md變數 描述 :title 標題:year 建立年份（4 位數）:month 建立月份（2 位數）:i_month 建立月份（去掉開頭的零）:day 建立日期（2 位數）:i_day 建立日期（去掉開頭的零） 草稿 在建立時會被儲存於 source/_drafts 資料夾，你可以透過 1hexo publish [layout] &lt;title&gt; 將草稿從 source/_drafts 資料夾移動到 source/_posts 資料夾。在執行時加上 --draft 選項，或是把 render_drafts 設定改為 true 來預覽草稿。鷹架（Scaffold）在建立文章時，Hexo 會根據 scaffolds 資料夾內相對應的檔案來建立檔案，例如：hexo new photo "My Gallery"在執行這行指令時，Hexo 會嘗試在 scaffolds 資料夾中找尋 photo.md，並根據其內容建立文章，以下是您可在鷹架中使用的變數：變數 描述 layout 佈局title 標題date 檔案建立日期 編輯文章 Front-matter 是檔案最上方以 — 分隔的區域，用於指定個別檔案的變數，舉例來說：12345678---title: Hello Worlddate: 2019/9/22 20:46:25categories: - hi - hellotages: [hi,hello]--- 以下是預先定義的設定，您可在模板中取得這些設定值並加以利用。設定 描述 預設值 layout 佈局title 標題date 建立日期 檔案建立日期updated 更新日期 檔案更新日期comments 開啟文章的留言功能 truetags 標籤（不適用於分頁）categories 分類（不適用於分頁）permalink 覆蓋文章網址keywords 僅用在 meta 和 Open Graph 的關鍵詞（不建議使用） 分類和標籤 分類和標籤只有文章才支援，您可以在 Front-matter 中設定。在其他系統中，分類和標籤可能聽起來很接近，但是在 Hexo 中有著決定性的差別：分類是有順序和階層性的，也就是說 Foo, Bar 不等於 Bar, Foo；而標籤沒有順序和階層。12345categories:- Diarytags:- PS3- Games此外我們可以透過 list 來對一篇文章同時定義多個分類。1234categories:- [Diary, PlayStation]- [Diary, Games]- [Life]JSON Front-matter除了 YAML 外，你也可利用 JSON 來撰寫 Front-matter，只要將 — 代換成 ;;; 即可。123"title": "Hello World","date": "2019/9/26 20:46:25";;;插入圖片 1![ 描述文字 ]( 圖片路徑或 URL)插入指定大小圖片 1{% img [class names] /path/to/image [width] [height] [title text [alt text]] %} 插入鏈接 1![ 文字 ]( 鏈接 "文字")效果：我的部落格 表格 12345| 表頭 1| 表頭 2| 表頭 3| 表頭 4|-| :- | :-: | -: || 默認左對齊 | 左對齊 | 居中對齊 | 右對齊 || 默認左對齊 | 左對齊 | 居中對齊 | 右對齊 || 默認左對齊 | 左對齊 | 居中對齊 | 右對齊 | 效果：表頭 1表頭 2表頭 3表頭 4默認左對齊 左對齊 居中對齊 右對齊 默認左對齊 左對齊 居中對齊 右對齊 默認左對齊 左對齊 居中對齊 右對齊 繼續閱讀 插入 &lt;!--more--&gt; 更多語法請參考：Markdown Guide 基礎語法 和 Markdown Guide 擴展語法 插入注腳 需要安裝 hexo-footnotes 插件 在 blog 根目錄 Git bash 執行：1npm install hexo-footnotes --save打開_config.yml 下方加入 12plugins: - hexo-footnotes 使用方法：12345678910basic footnote[^1]here is an inline footnote[^2](inline footnote)and another one[^3]and another one[^4][^1]: basic footnote content[^3]: paragraphfootnotecontent[^4]: footnote content with some [markdown](https://en.wikipedia.org/wiki/Markdown)效果：插入音樂 插入音樂，需要使用插件 hexo-tag-aplayer，語法如下：12{% meting"id""server" "type" "autoplay" "mutex:false" "listmaxheight:340px" "preload:none" "theme:#ad7a86"%} 插入網易雲歌單 12{% meting "歌單 id 號" "netease" "playlist" "autoplay" "theme:#555" "mutex:true" "listmaxheight:340px" %}console.error("ReferenceError: value is not defined")Hexo 搭建系列 - 插入音樂與影片hexo-tag-aplayer 本站測試 插入影片 Youtube1{% youtube video_id %}B 站123&lt;iframe width="100%" height="400" src="//player.bilibili.com/player.html?aid=67104528&amp;cid=118581353&amp;page=2" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"&gt; &lt;/iframe&gt; 或者可以安裝 hexo-tag-bilibili 插件。 通用 123&lt;video width="100%" height="400" src="movie.mp4" controls="controls"&gt;The `&lt;video&gt;` tag is not supported by your browser.&lt;/video&gt; 插入 HEXO 自帶圖標 HEXO 自帶Font Awesome 的所有圖標，可以貼上 HTML 來使用。例如：1&lt;i class="fas fa-cat"&gt;&lt;/i&gt;顯示效果 發布文章 只需要生成加部署兩步驟即可。12hexo generatehexo deploy你也可以將這兩個命令縮成一句(建議不要)hexo g -d 參考資料Hexo 寫作文件Markdown 語法說明Hexo Markdown 简明语法手册 document.querySelectorAll('.github-emoji') .forEach(el => {if (!el.dataset.src) {return;} const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => {img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => {img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HELLO]]></title>
    <url>%2Fposts%2F57665%2F</url>
    <content type="text"><![CDATA[一個測試文章 Emoji 表情測試❤️💙💜🖤💔❣️💕💞💓test hexo-admintest 代碼測試123code here+ lowe- fkdosp document.querySelectorAll('.github-emoji') .forEach(el => {if (!el.dataset.src) {return;} const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => {img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => {img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
  <entry>
    <title><![CDATA[Github + Hexo 新手搭建手冊 (含各種 TIPS 與問題解決)]]></title>
    <url>%2Fposts%2F30115%2F</url>
    <content type="text"><![CDATA[什麼是 Hexo？Hexo 是一個快速、簡單且強大的網誌框架。Hexo 使用 Markdown（或其他渲染引擎）解析您的文章，並在幾秒鐘內，透過漂亮的主題產生靜態檔案。因為它能快速並且簡單的搭建自己的部落格，因此越來越多人開始使用 HEXO。你可以很輕易地透過官網的教程安裝 HEXO，但若你是對這方面完全陌生的 "小白"，你可以透過本篇文章完美安裝 HEXO，在教程當中會提供各種可能在安裝過程中會遇到的錯誤解決方式，若還是無法成功安裝的人歡迎在回覆當中詢問，我會嘗試幫你解答。準備工作 你只需要安裝以下兩種軟體，就可以開始搭建。Node.js (建議使用 10.0 及以上版本)Git什麼是 Node.js？Node.js 是一個能夠在伺服器端運行 JavaScript 的開放原始碼、跨平台 JavaScript 執行環境。Node.js 大部分基本模組都用 JavaScript 語言編寫。在 Node.js 出現之前，JavaScript 通常作為用戶端程式設計語言使用，以 JavaScript 寫出的程式常在用戶的瀏覽器上執行。 Node.js 的出現使 JavaScript 也能用於伺服器端編程。Node.js 含有一系列內置模組，使得程式可以脫離 Apache HTTP Server 或 IIS，作為獨立伺服器執行。什麼是 Git？什麼是 GithubGit 是一個分散式版本控制軟體，最初由 Linus Torvalds 創作（也是作業系統 Linux 系統的開發者），其最初目的是為更好地管理 Linux kernel 開發而設計，其具備優秀的 merge tracing 合併程式碼的能力（使用程式碼 snapshot 來比較歷史版本差異）。Github 則是一個支援 git 程式碼存取和遠端托管的平台服務，有許多的開放原始碼的專案都是使用 Github 進行程式碼的管理。若是讀者未來有志於從事程式設計相關工作的話，建議可以熟悉掌握 Git 和 Github 的使用，並建立自己的 Github profile 作品集。若對 Git 使用上有任何問題，可以參考這個網站：連猴子都能懂的 Git 入門指南 安裝 Git 與 Node.jsGitMac使用 Homebrew，MacPorts 或下載 安裝程序 安裝Linux（Ubuntu，Debian)1sudo apt-get install git-coreLinux（Fedora，Red Hat，CentOS)1sudo yum install git-coreWindows 到 Git 官網下載合適版本：下載鏈接 下載好之後會有 Git Bash、Git CMD、Git GUI，我們需要利用 Git Bash 來操作 GIT。下載成功之後打開 Git Bash，輸入 git --version 回車，若版本正確則代表安裝成功。Node.js接著安裝 Node.js。Hexo 基於 Node.js，所以需要安裝 Node.js 及 npm。有兩種辦法：(新手建議直接下載安裝 ) 使用 nvm 安裝 (安裝 NVM 來安裝 node.js)直接下載安裝：下載鏈接 （選擇 LTS 下載適合版本即可） 若安裝完之後，在 Git Bash 輸入：12node -vnpm -v確認版本正確則代表安裝成功。安裝 HEXO若上述必備軟體都已經成功安裝，那你就可以打開 Git Bash 輸入下方指令，透過 npm 即可完成 HEXO 的安裝。1npm install hexo-cli -g然後檢查是否安裝成功 1hexo -v 若無出現錯誤代表安裝成功。若你在這一步出現 bash: hexo command not found，很有可能是你的 npm\node_modules\hexo-cli\bin 並未加入環境變量，可以參考 這篇文章 。 建置部落格 在電腦隨便一個地方新建一個資料夾作為部落格的目錄，我將資料夾命名為 blog（請將 blog 改成你的資料夾名），然後執行下方指令。1hexo init blog若出現 INFO Start blogging with Hexo! 代表成功。接著輸入 cd blog 進入 blog 內，然後輸入 npm install。 建立完成後會出現以下檔案：.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes_config.yml網站配置檔案，您可以在此配置大部分的設定。package.json應用程式資料。EJS, Stylus 和 Markdown renderer 已預設安裝，您可以稍後移除。scaffolds存新文章及新頁面的初始設置。source存文章、頁面、圖片…等檔案。 資料夾名稱開頭為 _ (底線) 和隱藏檔案會被忽略，除了 _posts 資料夾以外。 Markdown 和 HTML 檔案會被處理並放到 public 資料夾，而其他檔案會被拷貝過去。themes主題資料夾。Hexo 會根據主題來產生靜態檔案。之後才會出現的目錄：node_modulesnode.js 各種庫的目錄。public生成靜態文件目錄。本地測試 Git Bash 輸入下方命令：12hexo -ghexo server 若出現 INFO Hexo is running at http://localhost:4000 …，打開瀏覽器輸入 http://localhost:4000 即可看到生成的部落格頁面。Ctrl+C 可關閉本地服務。將 Hexo 部署到 Github你首先需要註冊 Github 帳號，並且登入新建一個 repository，命名格式：用戶名.github.io(若是不會註冊，請參考 這篇文章 。) 例如我的用戶名為 ZENreal，我的 repository name 就應該輸入 ZENreal.github.io，若不按照這個格式命名，之後部署到 Github pages 時就無法識別。(而這個 repository name 就是訪問你部落格的鏈結)配置 SSH打開 Git Bash 輸入：12git config --global user.name "Github 用戶名"git config --global user.email "Github Email"成功後會生成本地密鑰，請輸入以下命令檢查是否正確。12git config user.namegit config user.email確認無誤之後輸入：1ssh-keygen -t rsa -C "Github Email"創建 SSH。當出現 Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa): 時請按 Enter。Enter passphrase (empty for no passphrase):(輸入加密串) Enter same passphrase again:(再次輸入加密串)這個密碼會在你提交項目時使用，如果為空提交項目時則不用輸入。這是防止別人往你的項目裡提交內容。接著你可以在你的 user 資料夾內找到.ssh 這個資料夾，裡頭會有 id_rsa、id_rsa.pub。id_rsa 是你電腦的私人密鑰，id_rsa.pub 是公共密鑰。你需要把公共密鑰放到 Github 使得公鑰能夠匹配私鑰，才能通過 Git 將你的檔案上傳到 Github。使用文字檔打開 id_rsa.pub，將裡頭內容複製，貼到 Github(右上角頭像旁倒三角形) -&gt; Settings -&gt; SSH and GPG keys -&gt;New SSH key -&gt; Key 中。 你有可能會遇到的問題：Connecting to GitHub with SSHError: Permission denied (publickey)部署到 Github打開部落格目錄，找到配置檔案_config.yml(使用 sublime 打開)，拉到最底下 deploy 片段，按照以下格式修改：1234deploy: type: git repository: git@github.com: 你的 github 用戶名 / 你的 github 用戶名.github.io.git branch: master注意：冒號必須使用英文半形，且冒號後方都必須空一格。type,repository,branch 前方必須空兩格英文半形。若你不知道 repository: 該如何填寫，到你的 repository 右下方 Clone -&gt; Use SSH 複製框裡頭的內容貼上即可。在部落格目錄下打開 Git Bash，輸入下方命令開始安裝 deploy-git。1npm install hexo-deployer-git --save然後執行:1hexo generate執行 1hexo deploy 若出現 INFO Deploy done: git 則代表部署成功，接著你就可以打開瀏覽器輸入 http://yourname.github.io 瀏覽你的部落格。安裝部落格主題 (Themes)hexo 官方提供了多種主題免費使用，你可以到Themes|Hexo 下載喜歡的主題。下載好之後，打開你的部落格目錄，將剛剛下載好的主題解壓縮放進 \themes 裡。打開_config.yml，找到 12#Extensionstheme: landscape 將 theme 後面改成你的主題名稱然後存檔。打開 Git Bash，輸入：123hexo clean #每次換主題都要 cleanhexo generate #也可以直接打 hexo ghexo deploy #也可以直接打 hexo d如此一來主題就更換完成了。你也可以透過 git clone 主題地址 存放位置 來安裝主題，請在安裝前先閱讀該主題的 README.md 文件。修改主題配置 ：修改themes/ 主題名稱 /_config.yml 打開 RSS執行如下命令：1npm install hexo-generator-feed --save在 ./_config.yml 中添加:1234feed: type: atom path: atom.xml limit: 20常用指令 hexo generate (hexo g) #生成靜態文件，會在當前目錄下生成一個 public 資料夾hexo server(hexo s) #啟用本地 WEB 服務，用於預覽 (http://localhost:4000)hexo deploy(hexo d) #部署 BLOG 到遠端（比如 github）hexo new postName #新建文章hexo new page pageName #新建頁面hexo --debug #檢查 BUGnpm uninstall 插件名稱 #卸載插件 生成文章後會存在 部落格資料夾 \source\_posts 目錄底下，默認格式是.md 檔，md 就是指 markdown 語法，這邊建議使用 Sublime 來寫文章。注意事項 推薦使用 Sublime Text 來修改配置檔案！！！你才能確認格式沒有錯誤！！！如果格式錯誤，例如冒號是全形、冒號後方沒有空格、空格是全形…等，是不會變色的，你就知道你有輸入錯誤了。使用 Sublime Text 修改部落格配置：language: 網站使用的語言，可以參考 2-lettter ISO-639-1 code，預設為 en。 (建議設成 zh-TW)timezone: 網站時區，Hexo 預設使用您電腦的時區，您可以在 時區列表 尋找適當的時區。url: 網站的網址root: 網站的根目錄permalink: 文章 永久連結 的格式 :year/:month/:day/:title/ (不滿意這個格式可以下載hexo-abbrlink 插件) 你可能在使用 Hexo 途中遇到問題，請參考Hexo 官方文件。 document.querySelectorAll('.github-emoji') .forEach(el => {if (!el.dataset.src) {return;} const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => {img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => {img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>git</tag>
        <tag>node.js</tag>
        <tag>sublime</tag>
      </tags>
  </entry>
</search>
